<?php

    require_once("utils.php");
    

    /**
     * Function receives an array with integer numbers,
     * should return its sum. It is not alowed to use built-in php functions.
     *
     * –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ –º–∞—Å—Å–∏–≤ —á–∏—Å–µ–ª, –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å —Å—É–º–º—É —ç—Ç–∏—Ö —á–∏—Å–µ–ª.
     * –ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏—è php.
     *
     * @param array $arr
     * @return integer
     */
  
    function my_sum($arr) {
        $sum=0;
        foreach ($arr as $element){
            $sum += $element;
        }
        return $sum; 
    }


    /**
     * Function receives a long string with many words.
     * It should return the same string, but words,
     * larger then 6 symbols, should be changed, symbols
     * after the sixth one should be replaced by symbol *
     *
     * –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ –¥–ª–∏–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É —Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º —Å–ª–æ–≤.
     * –û–Ω–∞ –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å —Ç—É –∂–µ —Å—Ç—Ä–æ–∫—É, –Ω–æ –≤ —Å–ª–æ–≤–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ –¥–ª–∏–Ω–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤,
     * —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–º–µ—Å—Ç–æ –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤ –ø–æ—Å–ª–µ —à–µ—Å—Ç–æ–≥–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –æ–¥–Ω—É –∑–≤–µ–∑–¥–æ—á–∫—É.
     * –ü—Ä–∏–º–µ—Ä: –?–∑ —Å–ª–æ–≤–∞ 'verwijdering' –¥–æ–ª–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å—Å—è 'verwij*'
     *
     * @param string $shortMe
     * @return string
     */
    function shortener($shortMe) {
    $string = explode(" ",$shortMe);
    $length = (strlen($string));
        for ($i = 0; $i<6; $i++){
            if ($length>6){
                echo $shortMe.'*';
            }
    else {
       echo $string;}
        }
     

    /**
     * Function receives an array of strings.
     * Please return number of strings, which
     * length is at least 2 symbols and first character
     * is equal to the last character
     *
     * –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫. –í–µ—Ä–Ω—É—Ç—å –Ω–∞–¥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫,
     * –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –∫–æ—Ä–æ—á–µ –¥–≤—É—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ —É –∫–æ—Ç–æ—Ä—ã—Ö –ø–µ—Ä–≤—ã–π –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π
     * —Å–∏–º–≤–æ–ª —Å–æ–≤–ø–∞–¥–∞—é—Ç.
     *
     * @param array $arr
     * @return number
     */
    function compare_ends($arr) {
        $arrrr = [];

        for($i = 0; $i < count($arr); $i++) {
            if((strlen($arr[$i]) >= 2)&&(substr($arr[$i], 0, 1)==substr($arr[$i], -1))) {
                $arrrr[] = $arr[$i];
            }
        }

        return count($arrrr);
    }
 



    /**
     * Function receives a string, should return this string reversed.
     *
     * –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ —Å—Ç—Ä–æ–∫—É, –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å –µ–µ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–æ–π.
     *
     * @param string $str
     * @return string
     */
    
    function reverse_string($str) {
        $str1= "";
        for ($i = strlen($str); $i >= 0; $i--) {
            $str1 .= $str[$i];
        }
        return $str1;
}
    }

test_shortener();

test_compare_ends();

test_my_sum();

test_reverse_string();










